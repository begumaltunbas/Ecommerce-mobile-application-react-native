Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _react=require('react');var _react2=_interopRequireDefault(_react);
var _reactNative=require('react-native');
var _defaultStyles=require('./defaultStyles.js');var _defaultStyles2=_interopRequireDefault(_defaultStyles);
var _touchableOpacity=require('../common/touchableOpacity');var _touchableOpacity2=_interopRequireDefault(_touchableOpacity);
var _cardFormatting=require('../../common/cardFormatting');
var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);
var _string=require('string');var _string2=_interopRequireDefault(_string);
var _payment=require('payment');var _payment2=_interopRequireDefault(_payment);
var _reactNativeAwesomeCardIo=require('react-native-awesome-card-io');
var _scanCard=require('../scanCard');var _scanCard2=_interopRequireDefault(_scanCard);
var _reactNativeKeyboardSpacer=require('react-native-keyboard-spacer');var _reactNativeKeyboardSpacer2=_interopRequireDefault(_reactNativeKeyboardSpacer);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var DELAY_FOCUS=_reactNative.Platform.OS==='android'?200:0;var
AddCard=function(_Component){_inherits(AddCard,_Component);
function AddCard(props){_classCallCheck(this,AddCard);var _this=_possibleConstructorReturn(this,(AddCard.__proto__||Object.getPrototypeOf(AddCard)).call(this,
props));
_this.state={
addingCard:false,
cardNumberDirty:false,
scanningCard:false,
hasTriedScan:false,
cardNumber:'',
error:null,
expiry:'',
cvc:''};return _this;

}_createClass(AddCard,[{key:'componentWillMount',value:function componentWillMount()

{
if(_reactNativeAwesomeCardIo.CardIOUtilities.preload){
_reactNativeAwesomeCardIo.CardIOUtilities.preload();
}
}},{key:'componentDidMount',value:function componentDidMount()

{
this.refs.cardNumberInput.focus();
}},{key:'didScanCard',value:function didScanCard(

card){var _this2=this;
this.setState({
scanningCard:false,
hasTriedScan:true,
cardNumberDirty:true,
cardNumber:card.cardNumber});

var expiryYear=''+card.expiryYear;
if((0,_string2.default)(card.expiryMonth).length>=2&&(0,_string2.default)(expiryYear).length>=2){
this.setState({expiry:card.expiryMonth+'/'+expiryYear.slice(-2),expiryDirty:true});
_lodash2.default.delay(function(){return _this2.refs.cvcInput.focus();},DELAY_FOCUS);
}else{
_lodash2.default.delay(function(){return _this2.refs.expiryInput.focus();},DELAY_FOCUS);
}
if(this.props.onScanCardClose){
this.props.onScanCardClose();
}
}},{key:'isCardNumberValid',value:function isCardNumberValid()

{
return _payment2.default.fns.validateCardNumber(this.state.cardNumber);
}},{key:'isExpiryValid',value:function isExpiryValid()
{
return _payment2.default.fns.validateCardExpiry(this.state.expiry);
}},{key:'isCvcValid',value:function isCvcValid()
{
return _payment2.default.fns.validateCardCVC(this.state.cvc);
}},{key:'calculatedState',value:function calculatedState()

{
var cardNumberShowError=this.state.cardNumberDirty&&!this.isCardNumberValid();
var expiryShowError=this.state.expiryDirty&&!this.isExpiryValid();
var cvcShowError=this.state.cvcDirty&&!this.isCvcValid();
var error='';
if(cardNumberShowError){
error='Card Number is incorrect';
}else if(expiryShowError){
error='Expiry is incorrect';
}else if(cvcShowError){
error='CVC is incorrect';
}
return _extends({},
this.state,{
error:this.state.error||error,
cardNumberShowError:cardNumberShowError,
expiryShowError:expiryShowError,
cvcShowError:cvcShowError,
cardNumberFormatted:_payment2.default.fns.formatCardNumber(this.state.cardNumber)});

}},{key:'render',value:function render()

{var _this3=this;
var styles=_lodash2.default.merge({},(0,_defaultStyles2.default)(this.props.styles),this.props.styles);
var calculatedState=this.calculatedState();
if(calculatedState.addingCard){
return(
_react2.default.createElement(_reactNative.View,{style:styles.activityIndicatorContainer},
_react2.default.createElement(_reactNative.ActivityIndicator,{color:this.props.activityIndicatorColor,size:'large',style:styles.activityIndicator})));


}
if(calculatedState.scanningCard){
return _react2.default.createElement(_scanCard2.default,{scanCardGuideColor:this.props.scanCardGuideColor,didScanCard:function didScanCard(card){return _this3.didScanCard(card);}});
}
var addCardContents=
_react2.default.createElement(_reactNative.View,null,
_react2.default.createElement(_reactNative.View,{style:[styles.cardNumberContainer,calculatedState.cardNumberShowError&&styles.invalid]},
_react2.default.createElement(_reactNative.Image,{resizeMode:'contain',style:styles.cardNumberImage,source:require('../../../assets/images/card_front.png')}),
_react2.default.createElement(_reactNative.TextInput,{
ref:'cardNumberInput',
keyboardType:'numeric',
underlineColorAndroid:'transparent',
style:styles.cardNumberInput,
onChangeText:function onChangeText(rawCardNumber){
var cardNumber=(0,_string2.default)(rawCardNumber).replaceAll(' ','').s;
_this3.setState({cardNumber:cardNumber});
if(_payment2.default.fns.validateCardNumber(cardNumber)){
_this3.refs.expiryInput.focus();
}
},
value:calculatedState.cardNumberFormatted,
placeholder:'4242 4242 4242 4242',
onFocus:function onFocus(){return _this3.props.onCardNumberFocus&&_this3.props.onCardNumberFocus(calculatedState.cardNumber);},
onBlur:function onBlur(){
if(_this3.props.onCardNumberBlur){
_this3.props.onCardNumberBlur(calculatedState.cardNumber);
}
_this3.setState({cardNumberDirty:true});
}})),


_react2.default.createElement(_reactNative.View,{style:styles.monthYearCvcContainer},
_react2.default.createElement(_reactNative.View,{style:[styles.monthYearContainer,calculatedState.expiryShowError&&styles.invalid]},
_react2.default.createElement(_reactNative.Image,{resizeMode:'contain',style:styles.cardExpiryImage,source:require('../../../assets/images/card_expiry.png')}),
_react2.default.createElement(_reactNative.TextInput,{
ref:'expiryInput',
maxLength:5,
keyboardType:'numeric',
underlineColorAndroid:'transparent',
style:styles.monthYearTextInput,
onChangeText:function onChangeText(expiry){
var newExpiry=(0,_cardFormatting.formatMonthYearExpiry)(expiry,calculatedState.expiry);
_this3.setState({expiry:newExpiry});
if(_lodash2.default.size(newExpiry)===5){
if(_payment2.default.fns.validateCardExpiry(newExpiry)){
_this3.refs.cvcInput.focus();
}else{
_this3.setState({expiryDirty:true});
}
}
},
value:calculatedState.expiry,
placeholder:'MM/YY',
onFocus:function onFocus(){return _this3.props.onExpiryFocus&&_this3.props.onExpiryFocus(calculatedState.expiry);},
onBlur:function onBlur(){
_this3.setState({expiryDirty:true});
if(_this3.props.onExpiryBlur){
_this3.props.onExpiryBlur(calculatedState.expiry);
}
}})),


_react2.default.createElement(_reactNative.View,{style:[styles.cvcContainer,calculatedState.cvcShowError&&styles.invalid]},
_react2.default.createElement(_reactNative.Image,{resizeMode:'contain',style:styles.cvcImage,source:require('../../../assets/images/card_cvc.png')}),
_react2.default.createElement(_reactNative.TextInput,{
ref:'cvcInput',
keyboardType:'numeric',
underlineColorAndroid:'transparent',
style:styles.cvcInput,
onChangeText:function onChangeText(cvc){return _this3.setState({cvc:cvc});},
value:calculatedState.cvc,
placeholder:'CVC',
onFocus:function onFocus(){return _this3.props.onCvcFocus&&_this3.props.onCvcFocus(calculatedState.cvc);},
onBlur:function onBlur(){
_this3.setState({cvcDirty:true});
if(_this3.props.onCvcBlur){
_this3.props.onCvcBlur(calculatedState.cvc);
}
}}))),



_react2.default.createElement(_reactNative.View,{style:styles.errorTextContainer},
_react2.default.createElement(_reactNative.Text,{style:styles.errorText},calculatedState.error)),

_react2.default.createElement(_touchableOpacity2.default,{
style:styles.scanCardButton,
styles:styles,
onPress:function onPress(){
if(_this3.props.onScanCardOpen){
_this3.props.onScanCardOpen();
}
if(_reactNative.Platform.OS==='android'){
_reactNativeAwesomeCardIo.CardIOModule.
scanCard({

hideCardIOLogo:true,
suppressManualEntry:true,
suppressConfirmation:true}).

then(function(card){return _this3.didScanCard(card);}).
catch(function(){
var refToFocus=void 0;
if(!calculatedState.cardNumber){
refToFocus=_this3.refs.cardNumberInput;
}else if(!calculatedState.expiry){
refToFocus=_this3.refs.expiryInput;
}else{
refToFocus=_this3.refs.cvcInput;
}

_lodash2.default.delay(function(){return refToFocus.blur();},DELAY_FOCUS/2);
_lodash2.default.delay(function(){return refToFocus.focus();},DELAY_FOCUS);
});
}else{
_this3.setState({scanningCard:true});
}
},
last:true},

_react2.default.createElement(_reactNative.Text,{style:styles.scanCardButtonText},
calculatedState.hasTriedScan?this.props.scanCardAfterScanButtonText||'Scan Again':this.props.scanCardButtonText||'Scan Card')),


_react2.default.createElement(_touchableOpacity2.default,{
style:styles.addButton,
styles:styles,
onPress:function onPress(){
_this3.setState({expiryDirty:true,cardNumberDirty:true,cvcDirty:true});
if(_this3.isCardNumberValid()&&_this3.isExpiryValid()&&_this3.isCvcValid()){
_this3.setState({addingCard:true});
_this3.props.addCardHandler(calculatedState.cardNumber,calculatedState.expiry,calculatedState.cvc).
then(function(){return _this3.setState({addingCard:false});}).
catch(function(error){return _this3.setState({error:error.message,addingCard:false});});
}
},
last:true},

_react2.default.createElement(_reactNative.Text,{style:styles.addButtonText},this.props.addCardButtonText||'Add Card')));



return(
_react2.default.createElement(_reactNative.View,{style:{flex:1}},
_react2.default.createElement(_reactNative.View,{style:[styles.addCardContainer,this.props.style]},
addCardContents),

_reactNative.Platform.OS==='android'?null:_react2.default.createElement(_reactNativeKeyboardSpacer2.default,null)));


}}]);return AddCard;}(_react.Component);exports.default=AddCard;
//
//  CustomLocationPicker.swift
//  LocationPickerExample
//
//  Created by q6112345 on 3/8/2016.
//  Copyright Â© 2016 https://github.com/q6112345 All rights reserved.
//

import UIKit
import LocationPicker

// var gActiveLocationPicker: RNLocationPicker!  = nil;
var LocationDidSelectNotification: String = "LocationDidSelect";


@objc(RNLocationPicker)
class RNLocationPicker: LocationPicker, RCCExternalViewControllerProtocol {
  var propsDict: [String:String] = ["currentLocationText": "String",
                                    "searchBarPlaceholder": "String",
                                    "locationDeniedAlertTitle": "String",
                                    "locationDeniedAlertMessage": "String",
                                    "locationDeniedGrantText": "String",
                                    "locationDeniedCancelText": "String",
                                    "allowArbitraryLocation": "Bool",
                                    "mapViewZoomEnabled": "Bool",
                                    "mapViewShowsUserLocation": "Bool",
                                    "mapViewScrollEnabled": "Bool",
                                    "isRedirectToExactCoordinate": "Bool",
                                    "alternativeLocationEditable": "Bool",
                                    "forceReverseGeocoding": "Bool"]

  var boolPropNames: [String] = ["allowArbitraryLocation",
                                 "mapViewZoomEnabled",
                                 "mapViewShowsUserLocation",
                                 "mapViewScrollEnabled",
                                 "isRedirectToExactCoordinate",
                                 "alternativeLocationEditable",
                                 "forceReverseGeocoding"]

  var stringPropNames: [String] = ["currentLocationText",
                                   "searchBarPlaceholder",
                                   "locationDeniedAlertTitle",
                                   "locationDeniedAlertMessage",
                                   "locationDeniedGrantText",
                                   "locationDeniedCancelText"]

  var colorPropNames: [String] = ["tableViewBackgroundColor",
                                  "currentLocationIconColor",
                                  "searchResultLocationIconColor",
                                  "alternativeLocationIconColor",
                                  "pinColor",
                                  "primaryTextColor",
                                  "secondaryTextColor"]

  var doublePropNames: [String] = ["defaultLongitudinalDistance",
                                   "searchDistance"]

  func convertToProps(propName: String, value: AnyObject) -> Void {
    let propTypeString:String? = self.propsDict[propName]
    if (propTypeString != nil) {
//      let propTypeClass = NSClassFromString(propTypeString!)
//      if (Mirror(reflecting: self[propTypeString]).subjectType) {
//        code
//      }
//      self[propName] = value
      self.setValue(value, forKey: propName)
    }

  }

  weak var controllerDelegate: RCCViewControllerDelegate?
  func setProps(props: Dictionary<NSObject,AnyObject>?) -> Void {
//    if (props?["currentLocationText"] != nil) {
//          self.currentLocationText = props!["currentLocationText"] as! String
//    }
    for (key, value) in props! {
      if (self.colorPropNames.contains(key as! String)) {
        let colorValue = RCTConvert.UIColor(value)
        self.setValue(colorValue, forKey: key as! String)
      } else {
        self.setValue(value, forKey: key as! String)
      }
//       self.setValue(value, forKey: key as! String)

//      self.convertToProps(key as! String, value: value)
//       if (object_getClass(self.valueForKey(key as! String)) == object_getClass(value)) {
//         self.setValue(value, forKey: key as! String)
//      }

    }

  }

//  class func getActiveInstance() -> RNLocationPicker {
//    return gActiveLocationPicker
//  }

  override func viewDidLoad() {
//    gActiveLocationPicker = self
    super.addBarButtons()
    super.viewDidLoad()
  }

  override func locationDidSelect(locationItem: LocationItem) {
    let locationObject: [String:AnyObject] = ["name": locationItem.mapItem.placemark.title!,
                                              "latitude": locationItem.mapItem.placemark.coordinate.latitude,
                                              "longitude": locationItem.mapItem.placemark.coordinate.longitude]
    let nc = NSNotificationCenter.defaultCenter()
    nc.postNotificationName(LocationDidSelectNotification, object: locationObject)
  }

}
